(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["docomo-utils"] = factory();
	else
		root["docomo-utils"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Iterator = Iterator;\nexports.queryfy = queryfy;\nexports.dequeryfy = dequeryfy;\nexports.extend = extend;\nexports.getType = getType;\n/**\r\n * Iterator\r\n *\r\n * @example\r\n * var myArray = [\"pippo\", \"pluto\", \"paperino\"];\r\n * var it = Iterator(myArray);\r\n * it.next().value === \"pippo\"; //true\r\n * it.next().value === \"pluto\"; //true\r\n * it.next(true).value === \"paperino\" //false because with true you can reset it!\r\n * @param {Array} array - the array you want to transform in iterator\r\n * @returns {Object} - an iterator-like object\r\n * */\nfunction Iterator(array) {\n    var nextIndex = 0;\n\n    return {\n        next: function next(reset) {\n            if (reset) {\n                nextIndex = 0;\n            }\n            return nextIndex < array.length ? { value: array[nextIndex++], done: false } : { done: true };\n        }\n    };\n}\n\n/**\r\n * A function to compose query string\r\n *\r\n * @alias module:src/modules/Utils.composeApiString\r\n * @example\r\n * var API = \"http://jsonplaceholder.typicode.com/comments\"\r\n * var url = composeApiString(API, {postId:1});\r\n * // url will be \"http://jsonplaceholder.typicode.com/comments?postId=1\"\r\n * @param {Strinq} _api\r\n * @param {Object} params - a key value object: will be append to <api>?key=value&key2=value2\r\n * @returns {String} the string composed\r\n * */\nfunction queryfy(_api, query) {\n    var previousQuery = dequeryfy(_api);\n    var qs = '',\n        finalQuery,\n        api = _api.slice(0);\n\n    if (api.indexOf('?') > -1) {\n        api = api.slice(0, api.indexOf('?'));\n    }\n\n    api += '?';\n    finalQuery = extend(previousQuery, query);\n\n    for (var key in finalQuery) {\n        qs += encodeURIComponent(key);\n        // if a value is null or undefined keep the key without value\n        if (finalQuery[key]) {\n            qs += '=' + encodeURIComponent(finalQuery[key]);\n        }\n        qs += '&';\n    }\n\n    if (qs.length > 0) {\n        qs = qs.substring(0, qs.length - 1); // chop off last\n    }\n    return [api, qs].join('');\n}\n\n/**\r\n * A function to dequerify query string\r\n *\r\n * @example\r\n * var url = \"http://jsonplaceholder.typicode.com/comments?postId=1\r\n * var obj = dequerify(url); //obj is {\"postId\":\"1\"} \r\n * @param {Strinq} _url \r\n * @returns {Object} the object with key-value pairs, empty if no querystring is present\r\n * */\nfunction dequeryfy(_url) {\n    var param = decodeURI(_url.slice(0));\n\n    var query = param.split('?')[1];\n    if (!query) {\n        return {};\n    }\n\n    var keyvalue = query.split('&');\n\n    return keyvalue.reduce(function (newObj, _keyvalue) {\n        var splitted = _keyvalue.split('=');\n        var key = decodeURIComponent(splitted[0]);\n        var value = decodeURIComponent(splitted[1]);\n        newObj[key] = value;\n        return newObj;\n    }, {});\n}\n\n/**\r\n * extend: this function merge two objects in a new one with the properties of both\r\n *\r\n * @param {Object} o1 -\r\n * @param {Object} o2 -\r\n * @returns {Object} a brand new object results of the merging\r\n * */\nfunction extend(o1, o2) {\n\n    var isObject = Object.prototype.toString.apply({});\n    if (o1.toString() !== isObject || o2.toString() !== isObject) {\n        throw new Error('Cannot merge different type');\n    }\n    var newObject = {};\n    for (var k in o1) {\n        if (o1.hasOwnProperty(k)) {\n            newObject[k] = o1[k];\n        }\n    }\n\n    for (var j in o2) {\n        if (o2.hasOwnProperty(j)) {\n            if (Array.isArray(o1[j]) && Array.isArray(o2[j])) {\n                newObject[j] = o1[j].concat(o2[j]);\n                continue;\n            }\n            newObject[j] = o2[j];\n        }\n    }\n    return newObject;\n}\n\n/**\r\n * getType\r\n * @returns {string} the type of the object. date for date array etc\r\n */\nfunction getType(obj) {\n    return {}.toString.call(obj).match(/\\s([a-z|A-Z]+)/)[1].toLowerCase();\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ])
});
;